---
name: 'Delete Merged Branches'

on:
  schedule:
    # Run every Sunday at midnight UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  delete-merged-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Delete merged branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Protected branch patterns (case-insensitive matching)
          PROTECTED_PATTERNS=(
            "main"
            "master"
            "release*"
            "Release*"
            "legacy-*"
            "*-legacy"
          )

          echo "Starting branch cleanup..."

          # Get all remote branches except HEAD
          git fetch --all --prune
          branches=$(git for-each-ref \
            --format='%(refname:short)' refs/remotes/origin | \
            grep -v 'origin/HEAD' | sed 's|origin/||')

          for branch in $branches; do
            echo "Checking branch: $branch"

            # Check if branch matches any protected pattern
            protected=false
            for pattern in "${PROTECTED_PATTERNS[@]}"; do
              case "$branch" in
                $pattern)
                  protected=true
                  echo "  → Protected (matches: $pattern), skipping"
                  break
                  ;;
              esac
            done

            if [ "$protected" = true ]; then
              continue
            fi

            # Check if branch is associated with a merged or closed PR
            echo "  → Checking PR status for branch: $branch"

            # Get PRs for this branch (both merged and closed)
            repo_api="https://api.github.com/repos/${{ github.repository }}"
            query="?head=${{ github.repository_owner }}:$branch&state=all"
            pr_response=$(curl -s \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "${repo_api}/pulls${query}")

            # Check if any PRs exist for this branch
            pr_count=$(echo "$pr_response" | jq '. | length')

            if [ "$pr_count" -eq 0 ]; then
              echo "  → No PR found for branch, skipping"
              continue
            fi

            # Check if all PRs for this branch are either merged or closed
            open_prs=$(echo "$pr_response" | \
              jq '[.[] | select(.state == "open")] | length')

            if [ "$open_prs" -gt 0 ]; then
              echo "  → Branch has open PR(s), skipping"
              continue
            fi

            # All PRs are either merged or closed, safe to delete
            merged_prs=$(echo "$pr_response" | \
              jq '[.[] | select(.merged_at != null)] | length')
            closed_prs=$(echo "$pr_response" | \
              jq '[.[] | select(.state == "closed" and .merged_at == null)] \
              | length')

            echo "  → Branch has $merged_prs merged and $closed_prs closed PRs"
            echo "  → Deleting branch: $branch"

            # Delete the remote branch
            delete_url="https://api.github.com/repos/${{ github.repository }}"
            delete_response=$(curl -s -X DELETE \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "${delete_url}/git/refs/heads/$branch")

            if echo "$delete_response" | jq -e '.message' > /dev/null 2>&1; then
              error_msg=$(echo "$delete_response" | jq -r '.message')
              echo "  → Error deleting branch: $error_msg"
            else
              echo "  → Successfully deleted branch: $branch"
            fi
          done

          echo "Branch cleanup completed!"
