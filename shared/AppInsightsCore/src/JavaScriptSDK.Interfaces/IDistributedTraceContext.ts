// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

import { IW3cTraceState } from "./IW3cTraceState";

/**
 * An object that can be used to populate a new {@link IDistributedTraceContext} instance,
 * the included {@link IW3cTraceState} is used as the parent of the created instances traceState
 */
export interface IDistributedTraceInit {
    /**
     * The unique identifier for the trace that this span belongs to.
     *
     * The trace ID is a globally unique identifier that connects all spans within a single
     * distributed trace. It consists of 16 randomly generated bytes encoded as 32 lowercase
     * hexadecimal characters, providing 128 bits of entropy to ensure worldwide uniqueness
     * with practically sufficient probability.
     *
     * @remarks
     * - Must be exactly 32 lowercase hexadecimal characters
     * - Represents 128 bits (16 bytes) of random data
     * - Shared by all spans within the same trace
     * - Used for trace correlation across distributed systems
     * - Should never be all zeros (invalid trace ID)
     *
     * @example
     * ```typescript
     * // Example trace ID format
     * const traceId = "4bf92f3577b34da6a3ce929d0e0e4736";
     *
     * // All spans in the same trace share this ID
     * console.log(parentSpan.spanContext().traceId === childSpan.spanContext().traceId); // true
     * ```
     */
    traceId: string;
    
    /**
     * The unique identifier for this specific span within the trace.
     *
     * The span ID uniquely identifies this span within the trace and is used to establish
     * parent-child relationships between spans. It consists of 8 randomly generated bytes
     * encoded as 16 lowercase hexadecimal characters, providing 64 bits of entropy to
     * ensure global uniqueness with practically sufficient probability.
     *
     * @remarks
     * - Must be exactly 16 lowercase hexadecimal characters
     * - Represents 64 bits (8 bytes) of random data
     * - Unique within the trace (different spans have different span IDs)
     * - Used as parent ID when creating child spans
     * - Should never be all zeros (invalid span ID)
     *
     * @example
     * ```typescript
     * // Example span ID format
     * const spanId = "00f067aa0ba902b7";
     *
     * // Each span has a unique ID within the trace
     * const parentId = parentSpan.spanContext().spanId; // "00f067aa0ba902b7"
     * const childId = childSpan.spanContext().spanId;   // "b9c7c989f97918e1"
     *
     * // Child span uses parent's span ID as its parent ID
     * console.log(childSpan.parentSpanId === parentId); // true
     * ```
     */
    spanId: string;

    /**
     * Indicates whether this span context was propagated from a remote parent span.
     *
     * This flag distinguishes between spans created locally within the same process
     * and spans that represent operations in remote services. Remote spans are typically
     * created when trace context is received via HTTP headers, message queues, or other
     * inter-process communication mechanisms.
     *
     * @defaultValue false - spans are considered local unless explicitly marked as remote
     *
     * @remarks
     * - True only when span context was received from another process/service
     * - Helps distinguish local vs. distributed trace segments
     * - Used by tracing systems for visualization and analysis
     * - Local child spans of remote parents are NOT considered remote themselves
     *
     * @example
     * ```typescript
     * // HTTP service receiving trace context
     * const incomingSpanContext = extractSpanContextFromHeaders(request.headers);
     * console.log(incomingSpanContext.isRemote); // true
     *
     * // Child span created locally
     * const localChild = tracer.startSpan('local-operation', {
     *   parent: incomingSpanContext
     * });
     * console.log(localChild.spanContext().isRemote); // false
     * ```
     */
    isRemote?: boolean;

    /**
     * Trace flags that control trace behavior and indicate sampling decisions.
     *
     * The trace flags are represented as a single byte (8-bit bitmap) that carries
     * trace-level information. The least significant bit (0x01) indicates whether
     * the trace is sampled. When this bit is set, it documents that the caller
     * may have recorded trace data. Additional bits are reserved for future use
     * and should be ignored when not understood.
     *
     * @remarks
     * - Represented as a number (0-255) corresponding to 8 bits
     * - Bit 0 (0x01): Sampled flag - indicates trace may contain recorded data
     * - Bits 1-7: Reserved for future use, should be preserved during propagation
     * - Used by sampling algorithms to make consistent decisions across services
     * - See {@link eW3CTraceFlags} for standard flag values
     *
     * @example
     * ```typescript
     * // Check if trace is sampled
     * const isSampled = (spanContext.traceFlags & 0x01) === 1;
     *
     * // Common flag values
     * const UNSAMPLED = 0x00; // 00000000 - not sampled
     * const SAMPLED = 0x01;   // 00000001 - sampled
     *
     * // Preserving unknown flags during propagation
     * const preservedFlags = spanContext.traceFlags | 0x01; // Set sampled bit while preserving others
     *
     * // W3C traceparent header format includes these flags
     * const traceparent = `00-${traceId}-${spanId}-${traceFlags.toString(16).padStart(2, '0')}`;
     * ```
     */
    traceFlags: number;

    /**
     * Vendor-specific trace state information for cross-system trace correlation.
     *
     * The trace state carries tracing-system-specific context in a standardized format
     * defined by the W3C Trace Context specification. It allows multiple tracing systems
     * to participate in the same trace by providing a mechanism for each system to add
     * its own metadata without interfering with others.
     *
     * The trace state is formatted as a comma-separated list of key-value pairs, where
     * each pair represents one tracing system's contribution. Keys should be unique
     * within the trace state and follow specific naming conventions.
     *
     * @remarks
     * - Maximum of 32 list members allowed
     * - Each member format: `key=value` separated by commas
     * - Keys should be namespaced to avoid conflicts (e.g., `vendor@system=value`)
     * - Total size should not exceed 512 characters for practical header limits
     * - Spaces around list members are ignored
     * - Preserves vendor-specific information during trace propagation
     *
     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-field | W3C Trace Context Specification}
     *
     * @example
     * ```typescript
     * // Single tracing system
     * const singleVendor = {
     *   get: (key: string) => key === 'rojo' ? '00f067aa0ba902b7' : undefined,
     *   set: (key: string, value: string) => { ... },
     *   unset: (key: string) => { ... },
     *   serialize: () => 'rojo=00f067aa0ba902b7'
     * };
     *
     * // Multiple tracing systems
     * const multiVendor = {
     *   serialize: () => 'rojo=00f067aa0ba902b7,congo=t61rcWkgMzE,vendor@system=custom-value'
     * };
     *
     * // Accessing trace state
     * const rojoValue = spanContext.traceState?.get('rojo');
     * const serialized = spanContext.traceState?.serialize();
     *
     * // HTTP header format
     * headers['tracestate'] = spanContext.traceState?.serialize() || '';
     * ```
     */
    traceState?: IW3cTraceState;
}

export interface IDistributedTraceContext {

    /**
     * Returns the current name of the page
     */
    getName(): string;

    /**
     * Sets the current name of the page, also updates the name for any parent context.
     * This is used to identify the page in the telemetry data.
     * @remarks This function updates the current and ALL parent contexts with the new name,
     * to just update the name of the current context, use the `pageName` property.
     * @param pageName - The name of the page
     * @deprecated Use the `pageName` property to avoid the side effect of changing the page name of all
     * parent contexts.
     */
    setName(pageName: string): void;

    /**
     * Returns the unique identifier for a trace. All requests / spans from the same trace share the same traceId.
     * Must be read from incoming headers or generated according to the W3C TraceContext specification,
     * in a hex representation of 16-byte array. A.k.a. trace-id, TraceID or Distributed TraceID
     */
    getTraceId(): string;

    /**
     * Set the unique identifier for a trace. All requests / spans from the same trace share the same traceId.
     * Must be conform to the W3C TraceContext specification, in a hex representation of 16-byte array.
     * A.k.a. trace-id, TraceID or Distributed TraceID https://www.w3.org/TR/trace-context/#trace-id
     *
     * @remarks Sets the traceId for the current context AND all parent contexts, if you want to set the traceId
     * for the current context only, use the `traceId` property.
     * @param newValue - The traceId to set
     * @deprecated Use the `traceId` property to avoid the side effect of changing the traceId of all
     * parent contexts.
     */
    setTraceId(newValue: string): void;

    /**
     * Self-generated 8-bytes identifier of the incoming request. Must be a hex representation of 8-byte array.
     * Also know as the parentId, used to link requests together
     */
    getSpanId(): string;

    /**
     * Self-generated 8-bytes identifier of the incoming request. Must be a hex representation of 8-byte array.
     * Also know as the parentId, used to link requests together
     * https://www.w3.org/TR/trace-context/#parent-id
     *
     * @remarks Sets the spanId for the current context AND all parent contexts, if you want to set the spanId for
     * the current context only, use the `spanId` property.
     * @param newValue - The spanId to set
     * @deprecated Use the `spanId` property to avoid the side effect of changing the spanId of all
     * parent contexts.
     */
    setSpanId(newValue: string): void;

    /**
     * An integer representation of the W3C TraceContext trace-flags.
     */
    getTraceFlags(): number | undefined;

    /**
     * https://www.w3.org/TR/trace-context/#trace-flags
     * @remarks Sets the trace flags for the current context and ALL  parent contexts, if you want to set the trace
     * flags for the current context only, use the `traceFlags` property.
     * @param newValue - An integer representation of the W3C TraceContext trace-flags.
     * @deprecated Use the `traceFlags` property to avoid the side effect of changing the traceFlags of all
     * parent contexts.
     */
    setTraceFlags(newValue?: number): void;

    /**
     * Returns the current name of the page
     * @remarks This function updates the current context only, to update the name of the current and ALL parent contexts,
     * use the `setName` method.
     * @default undefined
     * @since 3.4.0
     */
    pageName: string;

    /**
     * The current ID of the trace that this span belongs to. It is worldwide unique
     * with practically sufficient probability by being made as 16 randomly
     * generated bytes, encoded as a 32 lowercase hex characters corresponding to
     * 128 bits.
     * @remarks It is NOT recommended that you dynamically change this value after creation and it is actively
     * being used as this may affect anyone accessing this context (as a parent for instance). You should logically
     * treat this as readonly after creation.
     * @remarks If you update this value, it will only update for the current context, not the parent context,
     * if you need to update the current and ALL parent contexts, use the `setTraceId` method which
     * provides the previous behavior.
     * @since 3.4.0
     */
    traceId: string;

    /**
     * The ID of the Span. It is globally unique with practically sufficient
     * probability by being made as 8 randomly generated bytes, encoded as a 16
     * lowercase hex characters corresponding to 64 bits.
     * If you update this value, it will only update for the current context, not the parent context.
     * @remarks If you update this value, it will only update for the current context, not the parent context,
     * if you need to update the current and ALL parent contexts, use the `setSpanId` method.
     * @since 3.4.0
     */
    spanId: string;

    /**
     * Returns true if the current context was initialized (propagated) from a remote parent.
     * @since 3.4.0
     * @default false
     * @returns True if the context was propagated from a remote parent
     */
    readonly isRemote: boolean;

    /**
     * Trace flags to propagate.
     *
     * It is represented as 1 byte (bitmap). Bit to represent whether trace is
     * sampled or not. When set, the least significant bit documents that the
     * caller may have recorded trace data. A caller who does not record trace
     * data out-of-band leaves this flag unset.
     *
     * see {@link eW3CTraceFlags} for valid flag values.
     *
     * @remarks If you update this value, it will only update for the current context, not the parent context,
     * if you need to update the current and ALL parent contexts, use the `setTraceFlags` method.
     * @since 3.4.0
     */
    traceFlags?: number;
   
    /**
     * Returns the current trace state which will be used to propgate context across different services.
     * Updating (adding / removing keys) of the trace state will modify the current context.
     * @remarks Unlike the OpenTelemetry {@link TraceState}, this value is a mutable object, so you can
     * modify it directly you do not need to reassign the new value to this property.
     * @since 3.4.0
     */
    readonly traceState: IW3cTraceState;

    /**
     * Provides access to the parent context of the current context.
     * @remarks This is a read-only property, you cannot modify the parent context directly, you can only
     * modify the current context. If you need to modify the parent context, you need to do it through the
     * current context using the `setTraceId`, `setSpanId`, `setTraceFlags` and `setName` methods.
     * @default null
     * @since 3.4.0
     */
    readonly parentCtx?: IDistributedTraceContext | null;
}
