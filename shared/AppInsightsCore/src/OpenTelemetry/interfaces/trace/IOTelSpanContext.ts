import { IW3cTraceState } from "../../../applicationinsights-core-js";
import { IOTelTraceState } from "./IOTelTraceState";

/**
 * Represents the essential information from a span that must be serialized and propagated 
 * across process and service boundaries for distributed tracing.
 * 
 * The span context is the immutable portion of a span that contains the trace ID, span ID,
 * trace flags, and trace state. This information is sufficient to create child spans and
 * maintain trace connectivity across distributed systems. Unlike the full span, the span
 * context can be safely serialized and transmitted via HTTP headers, message queues, or
 * other inter-process communication mechanisms.
 * 
 * @since 3.4.0
 * 
 * @remarks
 * - Span context is immutable once created
 * - Contains only the essential data needed for trace propagation
 * - Must be serialized alongside baggage for complete context propagation
 * - Follows W3C Trace Context specification for interoperability
 * 
 * @example
 * ```typescript
 * // Extract span context for propagation
 * const span = tracer.startSpan('parent-operation');
 * const spanContext = span.spanContext();
 * 
 * // Serialize for HTTP propagation
 * const traceParent = `00-${spanContext.traceId}-${spanContext.spanId}-${spanContext.traceFlags.toString(16).padStart(2, '0')}`;
 * 
 * // Create child span in another service using propagated context
 * const childSpan = tracer.startSpan('child-operation', {
 *   parent: spanContext
 * });
 * 
 * console.log('Trace ID:', spanContext.traceId); // 32 hex characters
 * console.log('Span ID:', spanContext.spanId);   // 16 hex characters  
 * console.log('Is Remote:', spanContext.isRemote); // true if from remote parent
 * ```
 */
export interface IOTelSpanContext {
    /**
     * The unique identifier for the trace that this span belongs to.
     * 
     * The trace ID is a globally unique identifier that connects all spans within a single
     * distributed trace. It consists of 16 randomly generated bytes encoded as 32 lowercase
     * hexadecimal characters, providing 128 bits of entropy to ensure worldwide uniqueness
     * with practically sufficient probability.
     * 
     * @remarks
     * - Must be exactly 32 lowercase hexadecimal characters
     * - Represents 128 bits (16 bytes) of random data
     * - Shared by all spans within the same trace
     * - Used for trace correlation across distributed systems
     * - Should never be all zeros (invalid trace ID)
     * 
     * @example
     * ```typescript
     * // Example trace ID format
     * const traceId = "4bf92f3577b34da6a3ce929d0e0e4736";
     * 
     * // All spans in the same trace share this ID
     * console.log(parentSpan.spanContext().traceId === childSpan.spanContext().traceId); // true
     * ```
     */
    traceId: string;
    
    /**
     * The unique identifier for this specific span within the trace.
     * 
     * The span ID uniquely identifies this span within the trace and is used to establish
     * parent-child relationships between spans. It consists of 8 randomly generated bytes
     * encoded as 16 lowercase hexadecimal characters, providing 64 bits of entropy to
     * ensure global uniqueness with practically sufficient probability.
     * 
     * @remarks
     * - Must be exactly 16 lowercase hexadecimal characters
     * - Represents 64 bits (8 bytes) of random data
     * - Unique within the trace (different spans have different span IDs)
     * - Used as parent ID when creating child spans
     * - Should never be all zeros (invalid span ID)
     * 
     * @example
     * ```typescript
     * // Example span ID format
     * const spanId = "00f067aa0ba902b7";
     * 
     * // Each span has a unique ID within the trace
     * const parentId = parentSpan.spanContext().spanId; // "00f067aa0ba902b7"
     * const childId = childSpan.spanContext().spanId;   // "b9c7c989f97918e1"
     * 
     * // Child span uses parent's span ID as its parent ID
     * console.log(childSpan.parentSpanId === parentId); // true
     * ```
     */
    spanId: string;

    /**
     * Indicates whether this span context was propagated from a remote parent span.
     * 
     * This flag distinguishes between spans created locally within the same process
     * and spans that represent operations in remote services. Remote spans are typically
     * created when trace context is received via HTTP headers, message queues, or other
     * inter-process communication mechanisms.
     * 
     * @defaultValue false - spans are considered local unless explicitly marked as remote
     * 
     * @remarks
     * - True only when span context was received from another process/service
     * - Helps distinguish local vs. distributed trace segments
     * - Used by tracing systems for visualization and analysis
     * - Local child spans of remote parents are NOT considered remote themselves
     * 
     * @example
     * ```typescript
     * // HTTP service receiving trace context
     * const incomingSpanContext = extractSpanContextFromHeaders(request.headers);
     * console.log(incomingSpanContext.isRemote); // true
     * 
     * // Child span created locally
     * const localChild = tracer.startSpan('local-operation', {
     *   parent: incomingSpanContext
     * });
     * console.log(localChild.spanContext().isRemote); // false
     * ```
     */
    isRemote?: boolean;

    /**
     * Trace flags that control trace behavior and indicate sampling decisions.
     * 
     * The trace flags are represented as a single byte (8-bit bitmap) that carries
     * trace-level information. The least significant bit (0x01) indicates whether
     * the trace is sampled. When this bit is set, it documents that the caller
     * may have recorded trace data. Additional bits are reserved for future use
     * and should be ignored when not understood.
     * 
     * @remarks
     * - Represented as a number (0-255) corresponding to 8 bits
     * - Bit 0 (0x01): Sampled flag - indicates trace may contain recorded data
     * - Bits 1-7: Reserved for future use, should be preserved during propagation
     * - Used by sampling algorithms to make consistent decisions across services
     * - See {@link eW3CTraceFlags} for standard flag values
     * 
     * @example
     * ```typescript
     * // Check if trace is sampled
     * const isSampled = (spanContext.traceFlags & 0x01) === 1;
     * 
     * // Common flag values
     * const UNSAMPLED = 0x00; // 00000000 - not sampled
     * const SAMPLED = 0x01;   // 00000001 - sampled
     * 
     * // Preserving unknown flags during propagation
     * const preservedFlags = spanContext.traceFlags | 0x01; // Set sampled bit while preserving others
     * 
     * // W3C traceparent header format includes these flags
     * const traceparent = `00-${traceId}-${spanId}-${traceFlags.toString(16).padStart(2, '0')}`;
     * ```
     */
    traceFlags: number;

    /**
     * Vendor-specific trace state information for cross-system trace correlation.
     * 
     * The trace state carries tracing-system-specific context in a standardized format
     * defined by the W3C Trace Context specification. It allows multiple tracing systems
     * to participate in the same trace by providing a mechanism for each system to add
     * its own metadata without interfering with others.
     * 
     * The trace state is formatted as a comma-separated list of key-value pairs, where
     * each pair represents one tracing system's contribution. Keys should be unique
     * within the trace state and follow specific naming conventions.
     * 
     * @remarks
     * - Maximum of 32 list members allowed
     * - Each member format: `key=value` separated by commas
     * - Keys should be namespaced to avoid conflicts (e.g., `vendor@system=value`)
     * - Total size should not exceed 512 characters for practical header limits
     * - Spaces around list members are ignored
     * - Preserves vendor-specific information during trace propagation
     * 
     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-field | W3C Trace Context Specification}
     * 
     * @example
     * ```typescript
     * // Single tracing system
     * const singleVendor = {
     *   get: (key: string) => key === 'rojo' ? '00f067aa0ba902b7' : undefined,
     *   set: (key: string, value: string) => { ... },
     *   unset: (key: string) => { ... },
     *   serialize: () => 'rojo=00f067aa0ba902b7'
     * };
     * 
     * // Multiple tracing systems
     * const multiVendor = {
     *   serialize: () => 'rojo=00f067aa0ba902b7,congo=t61rcWkgMzE,vendor@system=custom-value'
     * };
     * 
     * // Accessing trace state
     * const rojoValue = spanContext.traceState?.get('rojo');
     * const serialized = spanContext.traceState?.serialize();
     * 
     * // HTTP header format
     * headers['tracestate'] = spanContext.traceState?.serialize() || '';
     * ```
     */
    traceState?: IOTelTraceState;
}

/**
 * An {@link IOTelSpanContext} instance that is backed by the {@link IDistributedTraceContext}
 * instance, providing access to the mutable {@link IW3cTraceState} instance.
 */
export interface IWrappedOTelSpanContext extends IOTelSpanContext {

    /**
     * The W3C Trace State associated with this span context.
     */
    readonly w3cTraceState: IW3cTraceState;
}
